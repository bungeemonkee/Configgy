using System;
using System.Collections.Concurrent;

namespace Configgy.Cache
{
    /// <summary>
    /// A simple dictionary-based config cache.
    /// </summary>
    public class DictionaryCache : IValueCache
    {
        private readonly ConcurrentDictionary<string, object> _internal = new ConcurrentDictionary<string, object>();

        /// <summary>
        /// Add a value to the cache. If it already exists it will be overridden.
        /// </summary>
        /// <param name="valueName">The name of the value to add to the cache.</param>
        /// <param name="value">The value to add to the cache.</param>
        public void Add(string valueName, object value)
        {
            _internal.AddOrUpdate(valueName, value, (s, o) => value);
        }

        /// <summary>
        /// Gets a value from the cache.
        /// Produces the value using the callback if no value exists.
        /// </summary>
        /// <param name="valueName">The name of the value to get.</param>
        /// <param name="valueCallback">The callback to use to produce the value if it is not in the cache.</param>
        /// <returns>The value, either from the cache or as generated by the callback.</returns>
        public object Get(string valueName, Func<string, object> valueCallback)
        {
            return _internal.GetOrAdd(valueName, valueCallback);
        }

        /// <summary>
        /// Remove all values from the cache.
        /// </summary>
        public void Remove()
        {
            _internal.Clear();
        }

        /// <summary>
        /// Remove a value from the cache.
        /// </summary>
        /// <param name="valueName">The name of the value to remove from the cache.</param>
        public void Remove(string valueName)
        {
            _internal.TryRemove(valueName, out var value);
        }
    }
}
